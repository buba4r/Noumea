/**
 */
package wfwps.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import wfwps.util.WfwpsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WfwpsItemProviderAdapterFactory extends WfwpsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WfwpsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.WorkflowWps} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowWpsItemProvider workflowWpsItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.WorkflowWps}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowWpsAdapter() {
		if (workflowWpsItemProvider == null) {
			workflowWpsItemProvider = new WorkflowWpsItemProvider(this);
		}

		return workflowWpsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.LocalWPS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalWPSItemProvider localWPSItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.LocalWPS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalWPSAdapter() {
		if (localWPSItemProvider == null) {
			localWPSItemProvider = new LocalWPSItemProvider(this);
		}

		return localWPSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.RemoteWPS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoteWPSItemProvider remoteWPSItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.RemoteWPS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoteWPSAdapter() {
		if (remoteWPSItemProvider == null) {
			remoteWPSItemProvider = new RemoteWPSItemProvider(this);
		}

		return remoteWPSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.InputWorkflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputWorkflowItemProvider inputWorkflowItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.InputWorkflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputWorkflowAdapter() {
		if (inputWorkflowItemProvider == null) {
			inputWorkflowItemProvider = new InputWorkflowItemProvider(this);
		}

		return inputWorkflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.OutputWorkflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputWorkflowItemProvider outputWorkflowItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.OutputWorkflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputWorkflowAdapter() {
		if (outputWorkflowItemProvider == null) {
			outputWorkflowItemProvider = new OutputWorkflowItemProvider(this);
		}

		return outputWorkflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.LocalWPSReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalWPSReferenceItemProvider localWPSReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.LocalWPSReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalWPSReferenceAdapter() {
		if (localWPSReferenceItemProvider == null) {
			localWPSReferenceItemProvider = new LocalWPSReferenceItemProvider(this);
		}

		return localWPSReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.RemoteWPSReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoteWPSReferenceItemProvider remoteWPSReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.RemoteWPSReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoteWPSReferenceAdapter() {
		if (remoteWPSReferenceItemProvider == null) {
			remoteWPSReferenceItemProvider = new RemoteWPSReferenceItemProvider(this);
		}

		return remoteWPSReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.WorkflowReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowReferenceItemProvider workflowReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.WorkflowReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowReferenceAdapter() {
		if (workflowReferenceItemProvider == null) {
			workflowReferenceItemProvider = new WorkflowReferenceItemProvider(this);
		}

		return workflowReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.InputReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputReferenceItemProvider inputReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.InputReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputReferenceAdapter() {
		if (inputReferenceItemProvider == null) {
			inputReferenceItemProvider = new InputReferenceItemProvider(this);
		}

		return inputReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.OutputReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputReferenceItemProvider outputReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.OutputReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputReferenceAdapter() {
		if (outputReferenceItemProvider == null) {
			outputReferenceItemProvider = new OutputReferenceItemProvider(this);
		}

		return outputReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.WorkFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkFlowItemProvider workFlowItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.WorkFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkFlowAdapter() {
		if (workFlowItemProvider == null) {
			workFlowItemProvider = new WorkFlowItemProvider(this);
		}

		return workFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.WMS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WMSItemProvider wmsItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.WMS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWMSAdapter() {
		if (wmsItemProvider == null) {
			wmsItemProvider = new WMSItemProvider(this);
		}

		return wmsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.WFS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WFSItemProvider wfsItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.WFS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWFSAdapter() {
		if (wfsItemProvider == null) {
			wfsItemProvider = new WFSItemProvider(this);
		}

		return wfsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.IntegerConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerConstantItemProvider integerConstantItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.IntegerConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerConstantAdapter() {
		if (integerConstantItemProvider == null) {
			integerConstantItemProvider = new IntegerConstantItemProvider(this);
		}

		return integerConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.DoubleConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleConstantItemProvider doubleConstantItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.DoubleConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleConstantAdapter() {
		if (doubleConstantItemProvider == null) {
			doubleConstantItemProvider = new DoubleConstantItemProvider(this);
		}

		return doubleConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.StringConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringConstantItemProvider stringConstantItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.StringConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringConstantAdapter() {
		if (stringConstantItemProvider == null) {
			stringConstantItemProvider = new StringConstantItemProvider(this);
		}

		return stringConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.BooleanConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanConstantItemProvider booleanConstantItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.BooleanConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanConstantAdapter() {
		if (booleanConstantItemProvider == null) {
			booleanConstantItemProvider = new BooleanConstantItemProvider(this);
		}

		return booleanConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.GeometryConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeometryConstantItemProvider geometryConstantItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.GeometryConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeometryConstantAdapter() {
		if (geometryConstantItemProvider == null) {
			geometryConstantItemProvider = new GeometryConstantItemProvider(this);
		}

		return geometryConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link wfwps.RasterConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RasterConstantItemProvider rasterConstantItemProvider;

	/**
	 * This creates an adapter for a {@link wfwps.RasterConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRasterConstantAdapter() {
		if (rasterConstantItemProvider == null) {
			rasterConstantItemProvider = new RasterConstantItemProvider(this);
		}

		return rasterConstantItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (workflowWpsItemProvider != null) workflowWpsItemProvider.dispose();
		if (localWPSItemProvider != null) localWPSItemProvider.dispose();
		if (remoteWPSItemProvider != null) remoteWPSItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (outputItemProvider != null) outputItemProvider.dispose();
		if (inputWorkflowItemProvider != null) inputWorkflowItemProvider.dispose();
		if (outputWorkflowItemProvider != null) outputWorkflowItemProvider.dispose();
		if (localWPSReferenceItemProvider != null) localWPSReferenceItemProvider.dispose();
		if (remoteWPSReferenceItemProvider != null) remoteWPSReferenceItemProvider.dispose();
		if (workflowReferenceItemProvider != null) workflowReferenceItemProvider.dispose();
		if (inputReferenceItemProvider != null) inputReferenceItemProvider.dispose();
		if (outputReferenceItemProvider != null) outputReferenceItemProvider.dispose();
		if (workFlowItemProvider != null) workFlowItemProvider.dispose();
		if (wmsItemProvider != null) wmsItemProvider.dispose();
		if (wfsItemProvider != null) wfsItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (integerConstantItemProvider != null) integerConstantItemProvider.dispose();
		if (doubleConstantItemProvider != null) doubleConstantItemProvider.dispose();
		if (stringConstantItemProvider != null) stringConstantItemProvider.dispose();
		if (booleanConstantItemProvider != null) booleanConstantItemProvider.dispose();
		if (geometryConstantItemProvider != null) geometryConstantItemProvider.dispose();
		if (rasterConstantItemProvider != null) rasterConstantItemProvider.dispose();
	}

}
